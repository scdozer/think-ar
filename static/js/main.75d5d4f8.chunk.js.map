{"version":3,"sources":["components/shaders/hb3.js","bulb/Bulb-sm.js","components/shaders/hb2.js","components/Text.js","assets/bulb-art.zpt","App.jsx","reportWebVitals.js","index.jsx"],"names":["Hb3","shaderMaterial","time","color","THREE","extend","Model","props","hb3","useRef","group","useGLTF","nodes","materials","useFrame","clock","current","elapsedTime","ref","dispose","position","scale","rotation","Math","PI","geometry","material","LMP0003_Textures","attach","toneMapped","preload","Hb2","Text","children","vAlign","hAlign","size","font","useLoader","config","useMemo","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","mesh","useLayoutEffect","computeBoundingBox","boundingBox","getSize","x","y","args","App","useState","show","setShow","setIsVisible","Jumbo","colorManagement","camera","fov","rearCameraMirrorMode","onNotVisible","anchor","onNewAnchor","console","log","id","onVisible","targetImage","targetFile","fallback","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75d5d4f8.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\n// import { noise } from \"./noise\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport glsl from \"babel-plugin-glsl/macro\";\nconst Hb3 = shaderMaterial(\n  { time: 0, color: new THREE.Color(0.2, 0.0, 0.1) },\n  // vertex shader\n  glsl`\n      varying vec2 vUv;\n      uniform float time;\n      void main() {\n        vUv = uv;\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        modelPosition.z += cos(modelPosition.z + (time * 1.)) * 0.25;\n        modelPosition.x += cos(modelPosition.x + (time * 1.0)) * 0.25;\n\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectedPosition = projectionMatrix * viewPosition;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4 (position, 1.0);\n        // gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `,\n  // fragment shader\n  glsl`\n  vec3 cosPalette( float t , vec3 brightness, vec3 contrast, vec3 osc, vec3 phase)\n    {\n    return brightness + contrast*cos( 6.28318*(osc*t+phase) );\n    }\n      uniform float time;\n      uniform vec3 color;\n      varying vec2 vUv;\n      uniform vec2 resolution;\n      \n      void main() {\n        vec2 pos = ((vUv.xy) - 0.5) * 2.; \n        float angle = sin(atan(pos.y/abs(pos.x) + 0.001));\n        float r = sin(angle - time * 0.001);\n        float ringFrequency = 100.;\n        float g = cos(length(pos * ringFrequency) - time);\n        float blueFrequency = 1.;\n        float b = atan(angle + cos(length(pos * blueFrequency) - time * 0.5)); \n         r /= b;\n        vec3 brightness = vec3(0.8);\n        vec3 contrast = vec3(0.3,0.13,0.19);\n        vec3 osc = vec3(b,cos(time/20.),cos(time/31.)) *0.5;\n        vec3 phase = vec3(r,0.5,0.1);\n        vec3 color = cosPalette(g, brightness, contrast, osc, phase);\n        \n        gl_FragColor = vec4(color,1.);  \n      }\n    `\n);\n\nextend({ Hb3 });\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: AleixoAlonso (https://sketchfab.com/AleixoAlonso)\nlicense: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)\nsource: https://sketchfab.com/3d-models/low-poly-light-bulb-a7d27c2224d94c86a04083de8f9df7db\ntitle: Low Poly Light Bulb\n*/\n\nimport React, { useRef } from \"react\";\nimport { useGLTF } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport \"./../components/shaders/hb3\";\n\nexport default function Model(props) {\n  const hb3 = useRef();\n  const group = useRef();\n  const { nodes, materials } = useGLTF(\"bulb-sm.glb\");\n\n  useFrame(({ clock }) => {\n    hb3.current.time = clock.elapsedTime;\n  });\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group\n        position={[0, 0, 0]}\n        scale={[25, 25, 25]}\n        rotation={[-Math.PI / 2, 0, 0]}\n      >\n        <mesh\n          geometry={\n            nodes[\"#LMP0003_Light_Bulb_Low_Poly_#LMP0003_Textures_0\"].geometry\n          }\n          material={materials.LMP0003_Textures}\n        >\n          <hb3\n            ref={hb3}\n            attach=\"material\"\n            // texture={texture1}\n            toneMapped={false}\n          />\n        </mesh>\n      </group>\n    </group>\n  );\n}\n\nuseGLTF.preload(\"bulb-sm.glb\");\n","import * as THREE from \"three\";\nimport { extend } from \"@react-three/fiber\";\n// import { noise } from \"./noise\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport glsl from \"babel-plugin-glsl/macro\";\nconst Hb2 = shaderMaterial(\n  { time: 0, color: new THREE.Color(0.2, 0.0, 0.1) },\n  // vertex shader\n  glsl`\n  varying vec2 vUv;\n  uniform float time;\n  void main() {\n    vUv = uv;\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n    modelPosition.z += cos(modelPosition.z + (time * 1.)) * 0.25;\n    modelPosition.x += cos(modelPosition.x + (time * 1.0)) * 0.25;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n    // gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n    `,\n  // fragment shader\n  glsl`\n\n  float plot(float r, float pct){\n\treturn  smoothstep( pct-0.2, pct, r) -smoothstep( pct, pct+0.2, r);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n        return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n      uniform float time;\n      uniform vec3 color;\n      varying vec2 uv;\n      varying vec2 vUv;\n      uniform vec2 resolution;\n      \n      \n      void main() {\n        vec2 uv = vUv.xy; \n        vec3 col = vec3(1.0);\n        vec2 pos = vec2(0.5) - uv;\n        pos *= cos(time)*0.5+1.5;\n\n\n        float r = length(pos)*2.0;\n        float a = atan(pos.y,pos.x);\n    \n        float f = abs(cos(a*2.5+time*0.5))*sin(time*2.0)*0.698+cos(time)-4.0;\n        float d = f-r;\n\n        col = (vec3(smoothstep(fract(d),fract(d)+-0.200,0.160))-vec3(smoothstep(fract(d),fract(d)+-1.184,0.160)) ) \n\t* pal( f, vec3(0.725,0.475,0.440),vec3(0.605,0.587,0.007),vec3(1.0,1.0,1.0),vec3(0.310,0.410,0.154) );\n    float pct = plot(r*0.272,fract(d*(sin(time)*0.45+0.5)));\n\t\n    col += pct*pal( r, vec3(0.750,0.360,0.352),vec3(0.450,0.372,0.271),vec3(0.540,0.442,0.264),vec3(0.038,0.350,0.107) );\n\n\n        gl_FragColor = vec4(col,pct*0.1); \n      }\n    `\n);\n\nextend({ Hb2 });\n","import * as THREE from \"three\";\nimport React, { useMemo, useRef, useLayoutEffect } from \"react\";\nimport { useLoader, useFrame } from \"@react-three/fiber\";\nimport \"./shaders/hb2\";\n\nexport default function Text({\n  children,\n  vAlign = \"center\",\n  hAlign = \"center\",\n  size = 1.5,\n  color = \"#000000\",\n  ...props\n}) {\n  const font = useLoader(THREE.FontLoader, \"bold.blob\");\n  const config = useMemo(\n    () => ({\n      font,\n      size: 5,\n      height: 0.000005,\n      curveSegments: 10,\n      bevelEnabled: true,\n      bevelThickness: 1,\n      bevelSize: 0.05,\n      bevelOffset: 0,\n      bevelSegments: 32,\n    }),\n    [font]\n  );\n  const mesh = useRef();\n  const hb3 = useRef();\n  useLayoutEffect(() => {\n    const size = new THREE.Vector3();\n    mesh.current.geometry.computeBoundingBox();\n    mesh.current.geometry.boundingBox.getSize(size);\n    mesh.current.position.x =\n      hAlign === \"center\" ? -size.x / 4 : hAlign === \"right\" ? 0 : -size.x;\n    mesh.current.position.y =\n      vAlign === \"center\" ? -size.y / 2 : vAlign === \"top\" ? 0 : -size.y;\n  }, [children, hAlign, vAlign]);\n\n  useFrame(({ clock }) => {\n    hb3.current.time = clock.elapsedTime;\n  });\n  return (\n    <group {...props} scale={[0.1 * size, 0.1 * size, 0.1]}>\n      <mesh ref={mesh}>\n        <textGeometry args={[children, config]} />\n        {/* <meshNormalMaterial /> */}\n        <hb3\n          ref={hb3}\n          attach=\"material\"\n          // texture={texture1}\n          toneMapped={false}\n        />\n      </mesh>\n    </group>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/bulb-art.d56f1b1c.zpt\";","\n\nimport React, { Suspense, useRef, useState } from \"react\";\nimport { ZapparCamera, ImageTracker, ZapparCanvas } from '@zappar/zappar-react-three-fiber';\nimport Model from \"./bulb/Bulb-sm\";\nimport Text from \"./components/Text\";\nimport targetFile from './assets/bulb-art.zpt'\n\nfunction App() {\n  const [show, setShow] = useState(false);\n\n  const setIsVisible = () => {\n    return setShow(!show);\n  }\n\n  function Jumbo() {\n    const ref = useRef();\n    return (\n      <group ref={ref}>\n        <Text hAlign=\"right\" position={[1.25, 0.5, 0.5]} children=\"THINK\" />\n      </group>\n    );\n  }\n\n    return (\n      <ZapparCanvas colorManagement camera={{ fov: 12, position: [0, 1, 1] }}>\n        <ZapparCamera rearCameraMirrorMode=\"none\" />\n        <ImageTracker\n          onNotVisible={(anchor) => setIsVisible()}\n          onNewAnchor={(anchor) => console.log(`New anchor ${anchor.id}`)}\n          onVisible={(anchor) => setIsVisible}\n          targetImage={targetFile}\n        >\n          {show && (\n            <Suspense fallback={null}>\n              {/* <OrbitControls /> */}\n              <Model />\n              <Jumbo />\n            </Suspense>\n          )}\n        </ImageTracker>\n        <ambientLight intensity={0.9} />\n        <pointLight position={[-10, -10, -5]} intensity={5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n      </ZapparCanvas>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}